{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"E:\\\\postapp\\\\components\\\\post.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from \"react\";\nvar postStyle = {\n  display: \"flex\",\n  flexDirection: \"column\"\n};\nexport default function Post(_ref) {\n  var _this = this;\n\n  var handlePostListOpen = _ref.handlePostListOpen,\n      id = _ref.id;\n\n  var _useState = useState(null),\n      post = _useState[0],\n      setPost = _useState[1];\n\n  useEffect(function () {\n    debugger;\n    var storage = window.localStorage;\n    var postsJson = storage.getItem(\"posts\");\n    var posts = JSON.parse(postsJson);\n    var currentPost = posts.find(function (post) {\n      return post.id === +id;\n    });\n\n    if (!currentPost.comments) {\n      (function _callee() {\n        var res;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(fetch(\"https://jsonplaceholder.typicode.com/posts/\".concat(id, \"/comments\")));\n\n              case 2:\n                res = _context.sent;\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(res.json());\n\n              case 5:\n                currentPost.comments = _context.sent;\n                window.localStorage.setItem(\"posts\", JSON.stringify(posts));\n                setPost(currentPost);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })()[\"catch\"](function (error) {\n        return console.log(error);\n      });\n    } else {\n      setPost(post);\n    }\n  }, []);\n\n  var handleBackClick = function handleBackClick() {\n    handlePostListOpen();\n  };\n\n  return __jsx(React.Fragment, null, post ? __jsx(\"div\", {\n    style: postStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 24\n    }\n  }, __jsx(\"button\", {\n    onClick: handleBackClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, \"Back to posts page\"), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }\n  }, \" User: \", post.userId), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, \"Post Title: \", post.title), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, \"Post Body: \", post.body), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, post.comments && post.comments.map(function (comment) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 37\n      }\n    }, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 41\n      }\n    }, \"Username: \", comment.name), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 41\n      }\n    }, comment.body));\n  }))) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"Loading...\"));\n}","map":{"version":3,"sources":["E:/postapp/components/post.js"],"names":["useEffect","useState","postStyle","display","flexDirection","Post","handlePostListOpen","id","post","setPost","storage","window","localStorage","postsJson","getItem","posts","JSON","parse","currentPost","find","comments","fetch","res","json","setItem","stringify","error","console","log","handleBackClick","userId","title","body","map","comment","name"],"mappings":";;;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AAEA,IAAMC,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAE,MADK;AAEdC,EAAAA,aAAa,EAAE;AAFD,CAAlB;AAIA,eAAe,SAASC,IAAT,OAAwC;AAAA;;AAAA,MAAzBC,kBAAyB,QAAzBA,kBAAyB;AAAA,MAALC,EAAK,QAALA,EAAK;;AAAA,kBAC3BN,QAAQ,CAAC,IAAD,CADmB;AAAA,MAC5CO,IAD4C;AAAA,MACtCC,OADsC;;AAEnDT,EAAAA,SAAS,CAAC,YAAM;AACZ;AACA,QAAMU,OAAO,GAAGC,MAAM,CAACC,YAAvB;AACA,QAAMC,SAAS,GAAGH,OAAO,CAACI,OAAR,CAAgB,OAAhB,CAAlB;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWJ,SAAX,CAAd;AACA,QAAMK,WAAW,GAAGH,KAAK,CAACI,IAAN,CAAW,UAACX,IAAD;AAAA,aAAUA,IAAI,CAACD,EAAL,KAAY,CAACA,EAAvB;AAAA,KAAX,CAApB;;AACA,QAAI,CAACW,WAAW,CAACE,QAAjB,EAA2B;AACvB,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDACsBC,KAAK,sDAA+Cd,EAA/C,eAD3B;;AAAA;AACUe,gBAAAA,GADV;AAAA;AAAA,iDAEiCA,GAAG,CAACC,IAAJ,EAFjC;;AAAA;AAEIL,gBAAAA,WAAW,CAACE,QAFhB;AAGIT,gBAAAA,MAAM,CAACC,YAAP,CAAoBY,OAApB,CAA4B,OAA5B,EAAqCR,IAAI,CAACS,SAAL,CAAeV,KAAf,CAArC;AACAN,gBAAAA,OAAO,CAACS,WAAD,CAAP;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,aAOU,UAACQ,KAAD;AAAA,eAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX;AAAA,OAPV;AAQH,KATD,MASO;AACHjB,MAAAA,OAAO,CAACD,IAAD,CAAP;AACH;AAEJ,GAnBQ,EAmBN,EAnBM,CAAT;;AAqBA,MAAMqB,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BvB,IAAAA,kBAAkB;AACrB,GAFD;;AAIA,SACI,4BAEQE,IAAI,GAAG;AAAK,IAAA,KAAK,EAAEN,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH;AAAQ,IAAA,OAAO,EAAE2B,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADG,EAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAcrB,IAAI,CAACsB,MAAnB,CAFG,EAGH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAmBtB,IAAI,CAACuB,KAAxB,CAHG,EAIH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAkBvB,IAAI,CAACwB,IAAvB,CAJG,EAKH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQxB,IAAI,CAACY,QAAL,IACAZ,IAAI,CAACY,QAAL,CAAca,GAAd,CAAkB,UAACC,OAAD,EAAa;AAC3B,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAgBA,OAAO,CAACC,IAAxB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMD,OAAO,CAACF,IAAd,CAFJ,CADJ;AAMH,GAPD,CAHR,CALG,CAAH,GAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBArBZ,CADJ;AA2BH","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\nconst postStyle = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n};\r\nexport default function Post({handlePostListOpen, id}) {\r\n    const [post, setPost] = useState(null);\r\n    useEffect(() => {\r\n        debugger\r\n        const storage = window.localStorage;\r\n        const postsJson = storage.getItem(\"posts\");\r\n        const posts = JSON.parse(postsJson);\r\n        const currentPost = posts.find((post) => post.id === +id);\r\n        if (!currentPost.comments) {\r\n            (\r\n                async () => {\r\n                    const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}/comments`);\r\n                    currentPost.comments = await res.json();\r\n                    window.localStorage.setItem(\"posts\", JSON.stringify(posts));\r\n                    setPost(currentPost);\r\n                }\r\n            )().catch((error) => console.log(error))\r\n        } else {\r\n            setPost(post);\r\n        }\r\n\r\n    }, []);\r\n\r\n    const handleBackClick = () => {\r\n        handlePostListOpen();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                post ? <div style={postStyle}>\r\n                    <button onClick={handleBackClick}>Back to posts page</button>\r\n                    <span> User: {post.userId}</span>\r\n                    <span>Post Title: {post.title}</span>\r\n                    <span>Post Body: {post.body}</span>\r\n                    <ul>\r\n                        {\r\n                            post.comments &&\r\n                            post.comments.map((comment) => {\r\n                                return (\r\n                                    <li>\r\n                                        <div>Username: {comment.name}</div>\r\n                                        <div>{comment.body}</div>\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div> :\r\n                    <div>Loading...</div>\r\n            }\r\n        </>\r\n\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}